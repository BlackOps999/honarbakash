#Name of CICD workflow:
name: Honarbakash CICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  name: setup environment variables
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  PROJECT_NAME: noble-nation-321921
  CLOUDRUN_INSTANCE: honarbakhsh
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}
  SERVICE_NAME: getting-started
  REGISTERY_HOSTNAME: gcr.io
  NODE_ENV: ${{ secrets.NODE_ENV }}
  SQL_Instance: noble-nation-321921:europe-west4:ablackmagic-db

# ......A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # install node on the runner
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      # run our node app components
      - name: Install Dependencies (CI)
        run: npm ci
        
      - name: Initiate Build
        run: CI=false npm run build --if-present

      # Check env - if staging, run E2E tests
      - name: Check env
        run: env

      #- name: Run Test Suite if on STAGING
      #  run: npm test
    
  publish:
    needs: build
    name: push docker image to docker hub
    runs-on: ubuntu-latest
    
    steps:
      - name: check out the repo
        uses: actions/checkout@v2
      
      #- name: get version and tag
       # id: get_version
       # run: echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
    
      #- name: create docker image
      #  run: docker build . --no-cache -t ablackmagic1/node-app:${{ steps.get_version.outputs.VERSION }}

      # Connect to GCP
      - name: Setup GCP Service Account
        uses: google-github-actions/setup-gcloud@main
        with:
          version: 'latest'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_KEY }}
          #export_default_credentials: true

      # Authenticate docker to work over GCLOUD CLI
      - name: authenticate docker over GCLOUD SDK
        run: gcloud auth configure-docker

      # Build docker image
      - name: Build
        run: |
          export TAG=`echo $GITHUB_REF | awk -F/ '{print $NF}'`
          echo $TAG
          docker build -t "$REGISTERY_HOSTNAME"/"$PROJECT_NAME"/"$SERVICE_NAME":"$TAG" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the image to GCP
      - name: Publish to GCP Container Registry
        run: |
          export TAG=`echo $GITHUB_REF | awk -F/ '{print $NF}'`
          echo $TAG
          docker push "$REGISTERY_HOSTNAME"/"$PROJECT_NAME"/"$SERVICE_NAME":"$TAG"
          docker tag "$REGISTERY_HOSTNAME"/"$PROJECT_NAME"/"$SERVICE_NAME":"$TAG" "$REGISTERY_HOSTNAME"/"$PROJECT_NAME"/"$SERVICE_NAME":latest
          docker push "$REGISTERY_HOSTNAME"/"$PROJECT_NAME"/"$SERVICE_NAME":latest
          
      - name: Deploy to GCP Cloud Run
        run: gcloud run deploy $CLOUDRUN_INSTANCE --image "$REGISTERY_HOSTNAME"/"$PROJECT_NAME"/"$SERVICE_NAME":latest --region europe-west1 --add-cloudsql-instances $SQL_Instance

    
    

